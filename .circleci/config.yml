version: 2

# Specify working directories for each PHP version
# Unfortunately Circle CI is not able to expand environment/context variables in
# the value for working_directory
workdir-71: &workdir-71
  working_directory: ~/repo/7.1

workdir-72: &workdir-72
  working_directory: ~/repo/7.2

workdir-73: &workdir-73
  working_directory: ~/repo/7.3

# Define steps to build docker images for each PHP version
shared-build: &shared-build
  working_directory: ~/repo
  machine:
    docker_layer_caching: true
  steps:
    - checkout
    - run:
        name: Build docker image
        command: >
          docker build
          -t "hollodotme/fast-cgi-client:$PHP_VERSION-cli"
          -f .docker/php/$PHP_VERSION/Dockerfile
          .docker/php
    - run:
        name: Login to hub.docker.com
        command: |
          echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
    - run:
        name: Push docker image
        command: |
          docker push "hollodotme/fast-cgi-client:$PHP_VERSION-cli"

# Define steps to build the code and its dependencies
# Persist it to the workspace when done
shared-code: &shared-code
  docker:
    - image: hollodotme/fast-cgi-client:$PHP_VERSION-cli
  steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "composer.json" }}-$PHP_VERSION

    - run:
        name: Install comopser
        command: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php -r "copy('https://composer.github.io/installer.sig', 'installer.sig');"
          php -r "if (hash_file('sha384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
          php composer-setup.php --install-dir=/usr/bin --filename=composer
          php -r "unlink('composer-setup.php');"

    - run:
        name: Update composer
        command: composer self-update

    - run:
        name: Install dependencies
        command: |
          composer install -o --prefer-dist --no-interaction

    - save_cache:
        paths:
          - ./vendor
        key: v1-dependencies-{{ checksum "composer.json" }}-$PHP_VERSION

    - run:
        name: Prepare log directories
        command: |
          mkdir -p build/logs/coverage
          mkdir -p build/logs/junit
          mkdir -p build/logs/phpmetrics

    - persist_to_workspace:
        root: ~/repo
        paths:
          - "*"

# Define steps to check for PHP parse errors
shared-linting: &shared-linting
  docker:
    - image: hollodotme/fast-cgi-client:$PHP_VERSION-cli
  steps:
    - attach_workspace:
        at: ~/repo

    - run:
        name: Check for PHP parse errors
        command: find ./src -type f -name '*.php' -print0 | xargs -0 -n1 -P4 php -l -n | (! grep -v "No syntax errors detected" )

# Define steps to run unit tests
shared-unit-tests: &shared-unit-tests
  docker:
    - image: hollodotme/fast-cgi-client:$PHP_VERSION-cli
  steps:
    - attach_workspace:
        at: ~/repo

    - run:
        name: Run unit tests
        command: vendor/bin/phpunit$PHPUNIT_VERSION.phar -c build --testsuite Unit --log-junit build/logs/junit/junit.xml --coverage-html build/logs/coverage --coverage-clover=coverage.xml

    - run:
        name: Upload code coverage to codecov.io
        command: bash <(curl -s https://codecov.io/bash)

    - store_test_results:
        path: build/logs/junit

    - store_artifacts:
        path: build/logs/junit
        destination: code-coverage-junit

    - store_artifacts:
        path: build/logs/coverage
        destination: code-coverage-html

# Define steps to run integration tests
shared-integration-tests: &shared-integration-tests
  docker:
    - image: hollodotme/fast-cgi-client:$PHP_VERSION-cli
  steps:
    - attach_workspace:
        at: ~/repo

    - run:
        name: Run integration tests
        command: vendor/bin/phpunit$PHPUNIT_VERSION.phar -c build --testsuite Integration --log-junit build/logs/junit/junit.xml

    - store_test_results:
        path: build/logs/junit

    - store_artifacts:
        path: build/logs/junit
        destination: code-coverage-junit

# Define steps to run phpstan
shared-phpstan: &shared-phpstan
  docker:
    - image: phpstan/phpstan:latest
  steps:
    - attach_workspace:
        at: ~/repo

    - run:
        name: Run PHPStan
        command: analyze --level max src/

# Define the actual jobs from the templates above
jobs:
  "php-7.1-build":
    <<: *shared-build

  "php-7.2-build":
    <<: *shared-build

  "php-7.3-build":
    <<: *shared-build

  "php-7.1-code":
    <<: *shared-code
    <<: *workdir-71

  "php-7.2-code":
    <<: *shared-code
    <<: *workdir-72

  "php-7.3-code":
    <<: *shared-code
    <<: *workdir-73

  "php-7.1-linting":
    <<: *shared-linting
    <<: *workdir-71

  "php-7.2-linting":
    <<: *shared-linting
    <<: *workdir-72

  "php-7.3-linting":
    <<: *shared-linting
    <<: *workdir-73

  "php-7.1-unit-tests":
    <<: *shared-unit-tests
    <<: *workdir-71

  "php-7.2-unit-tests":
    <<: *shared-unit-tests
    <<: *workdir-72

  "php-7.3-unit-tests":
    <<: *shared-unit-tests
    <<: *workdir-73

  "php-7.1-integration-tests":
    <<: *shared-integration-tests
    <<: *workdir-71

  "php-7.2-integration-tests":
    <<: *shared-integration-tests
    <<: *workdir-72

  "php-7.3-integration-tests":
    <<: *shared-integration-tests
    <<: *workdir-73

  "php-7.1-phpstan":
    <<: *shared-phpstan
    <<: *workdir-71

  "php-7.2-phpstan":
    <<: *shared-phpstan
    <<: *workdir-72

  "php-7.3-phpstan":
    <<: *shared-phpstan
    <<: *workdir-73

# Define the workflows for each PHP version
workflows:
  version: 2
  build-test-analyze:
    jobs:

      # PHP 7.1 jobs

      - "php-7.1-build":
          context: php71
      - "php-7.1-code":
          context: php71
          requires:
            - "php-7.1-build"
      - "php-7.1-linting":
          context: php71
          requires:
            - "php-7.1-code"
      - "php-7.1-phpstan":
          context: php71
          requires:
            - "php-7.1-code"
      - "php-7.1-unit-tests":
          context: php71
          requires:
            - "php-7.1-linting"
            - "php-7.1-phpstan"
      - "php-7.1-integration-tests":
          context: php71
          requires:
            - "php-7.1-linting"
            - "php-7.1-phpstan"

      # PHP 7.2 jobs

      - "php-7.2-build":
          context: php72
      - "php-7.2-code":
          context: php72
          requires:
            - "php-7.2-build"
      - "php-7.2-linting":
          context: php72
          requires:
            - "php-7.2-code"
      - "php-7.2-phpstan":
          context: php72
          requires:
            - "php-7.2-code"
      - "php-7.2-unit-tests":
          context: php72
          requires:
            - "php-7.2-linting"
            - "php-7.2-phpstan"
      - "php-7.2-integration-tests":
          context: php72
          requires:
            - "php-7.2-linting"
            - "php-7.2-phpstan"

      # PHP 7.3 jobs

      - "php-7.3-build":
          context: php73
      - "php-7.3-code":
          context: php73
          requires:
            - "php-7.3-build"
      - "php-7.3-linting":
          context: php73
          requires:
            - "php-7.3-code"
      - "php-7.3-phpstan":
          context: php73
          requires:
            - "php-7.3-code"
      - "php-7.3-unit-tests":
          context: php73
          requires:
            - "php-7.3-linting"
            - "php-7.3-phpstan"
      - "php-7.3-integration-tests":
          context: php73
          requires:
            - "php-7.3-linting"
            - "php-7.3-phpstan"